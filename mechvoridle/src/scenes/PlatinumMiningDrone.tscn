[gd_scene load_steps=9 format=3 uid="uid://belm0otejt0tl"]

[ext_resource type="Script" uid="uid://nkwh55cyo1hx" path="res://src/scripts/platinum_mining_drone.gd" id="1_kkmdx"]

[sub_resource type="Shader" id="Shader_kkmdx"]
resource_local_to_scene = true
code = "shader_type canvas_item;

// === User Controls ===

// Color of the outline
uniform vec4 outline_color    : source_color = vec4(1.0);
// How far to search around a pixel for solid neighbors (in texels)
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
// Minimum alpha for a pixel to be considered solid
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
// Number of directions to sample from (max 8)
uniform int outline_samples   : hint_range(4, 8) = 4;
// Color to blend with solid pixels (alpha is blend strength)
uniform vec4 shade_color      : source_color = vec4(1.0, 1.0, 1.0, 0.5); 

// === Outline Sampling Directions ===

const vec2[8] DIRS = vec2[8]
(vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
 vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0));

// === Main Fragment ===

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;
	
	 // Skip fully transparent pixel with no outline
	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool semi  = (alpha > 0.0) && !solid;
	vec4 out_color = tex;

	// Blend solid pixels toward the shade_color based on its alpha
	if (solid && shade_color.a > 0.0) {
		out_color.rgb = mix(tex.rgb, shade_color.rgb, shade_color.a);
		out_color.a   = alpha;
	}

	bool found = false;

	// If not solid, check surrounding pixels for solid neighbors
	if (!solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found = true;
				break;
			}
		}
	}

	// Set final pixel color
	if      (solid) COLOR = out_color;
	else if (found) COLOR = outline_color;
	else if (semi)  COLOR = tex;
	else            discard;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_n41l5"]
resource_local_to_scene = true
shader = SubResource("Shader_kkmdx")
shader_parameter/outline_color = Color(1, 1, 1, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/shade_color = Color(1, 1, 1, 0)

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_jjkbh"]
load_path = "res://.godot/imported/platinum_drone.png-8dbbdb2cf5e9ee25267f5fd0c0a2a7d7.ctex"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_qsfdw"]
size = Vector2(22, 18)

[sub_resource type="Animation" id="Animation_n41l5"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 1)]
}

[sub_resource type="Animation" id="Animation_kkmdx"]
resource_name = "idle"
length = 2.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.578769, 1.24328),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(0, 1.5), Vector2(0, -2)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_qllqo"]
_data = {
&"RESET": SubResource("Animation_n41l5"),
&"idle": SubResource("Animation_kkmdx")
}

[node name="PlatinumMiningDrone" type="Node2D"]
script = ExtResource("1_kkmdx")

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_n41l5")
position = Vector2(0, 1)
texture = SubResource("CompressedTexture2D_jjkbh")

[node name="ProgressBar" type="ProgressBar" parent="."]
offset_left = -8.0
offset_top = -11.0
offset_right = 8.0
offset_bottom = -7.0
show_percentage = false

[node name="HurtBox" type="Area2D" parent="."]
collision_layer = 2
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="HurtBox"]
shape = SubResource("RectangleShape2D_qsfdw")

[node name="StateMachine" type="Node" parent="."]

[node name="Node" type="Node" parent="StateMachine"]

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
bus = &"SFX"
playback_type = 1

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
&"": SubResource("AnimationLibrary_qllqo")
}

[node name="DroneDataShower" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_left = -13.0
offset_top = -11.0
offset_right = 13.0
offset_bottom = 11.0
mouse_default_cursor_shape = 2

[connection signal="area_entered" from="HurtBox" to="." method="_on_hurt_box_area_entered"]
[connection signal="gui_input" from="DroneDataShower" to="." method="_on_drone_data_shower_gui_input"]
